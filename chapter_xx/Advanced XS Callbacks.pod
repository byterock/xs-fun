=head1 Chapter 03 - Advanced XS Callback Patch For OCI

=head2 Introduction 

Now we are going to jump off the deep end of XS programming and do a patch to DBD::Oracle.  
Now DBD::Oracle is the poster child of early XSW programming.  Starting out
way back in the stone ages starting with somthing called 'Oraperl.pm' back in 1994 that eventually 
morphed into DBI and DBD::Oracle. 

Now looking at the DBD::Oracle Code it is shall we say a little special as is not a straiforward call 
out to a 'C' or 'C++' library,  you are calling out to a very custome 'C' program and then to 
a very obscure 'C' library called OCI (Orcale Call Interface).  

Not only are we comlicating matter by adding in our own 'c' glue layer form PerlXS out to OIC and back
we also  have the problem of mostlikely the largest custom Makefile.PL on Cpan some 2000+ lines and tring 
to make DBD::Oracle with the latest and older Oracle clients and OS and nort breaking it for older
Oracle clients and OS.  

So be prepared for some frustraing momemts if you age going to try to patch DBD::Oracle, or any of the DBDs
that call out in the same way as DBD::Oracle

=head 2 OCI

Well the OCI Call Interface Programmer's Guide is a 20+ chapter behemoth that is a sure fire cure for insomnia 
ans hasn't rellay changed much form the 8i edition till the latests 11g. You will find everything but the
code examples where poorly written last century and the snippits given in the text are usualy much too short 
to make any sence of.

Googleing for code examples will not help much many is the time when I googeled for an useage eample and only
got a few rerferqaces usually back to my own code. Even today if you take a few random OCI calls from DBD::Oracle
and feed them into google odds are a page with DBD::Oracle code will come up.

Well the thing to remember is this is not an OCI tutoral so I will not be going into any depths on OCI just
filling in a little backgound info.

=head 2 DBD::Oracle
Well this set the whole DBI movement woring and it still going so something mush be right with it.  Now to undersand the 
patch a little inrto to the archetcure of this moduel would help out some and give you an idea how a larger
scale XS module is put together. So here is the 25c tour

=head 3 Inside DB::Oracle
Browsing the code base of DBD::Oracle you will quickly notice is is unlike you typical CPAN Perl module and even the 
XS modules you have been playing with.  

In the root folder you will find the typical CPAN boiler plate, Makefile.PL, CHANGELOG etc. you will also see two  
 .c files 'dbdimp.c' and 'oci8.c' a nubmer of '.h' files which are 'C' header an XS file 'Oracle.xs' pluse a 
 number of other that are not imprortant at the time.
 
If you follow down though the 'lib' dir you will eventually get to Oracle.pm and then a few other bit and beices under that.

Now DBD::Oralce is a little different than what you might of seen so far. It uses the 'DynaLoader' module to load in all 
the aformentioned '.c' and '.h' files and you XS file and hopefully it all works, again this is rather old code going 
back to 1994 yet again.

Well the 'DynaLoader' my suck it in but you also need to 'bootstrap' into you perl so in the perl code (and most DBDs are
the same) is a little like this.

=over

 use DBI ();
 use DynaLoader ();
 use Exporter ();
 ...
    @ISA = qw(DynaLoader Exporter);
 ...
    require_version DBI 1.51;
    DBD::Oracle->bootstrap($DBD::Oracle::VERSION);
 
=back

Now besides this DBD::Oracle works much the same as any XS Module have a look inside and find the 'ora_fetch_scroll' sub 
you will fide tha corosponding sub in Oracle.pm, now the majority of the calls form Perl to 'c' will not
be found in either one but in one of the 'c' files, for example 'connect' is actully found in 'dbdimp.c'
and for historical resones in not called 'connect' but acutally called 'dbd_db_login6'. Now what we are getting into
here is how DBI works as this is the 'connect' we call from DBI that calles the 'dbd_db_login6' is what ever driver happens
to be running.

So things are a little different in this type of 'dynamic' XS program.  Complex? Yes! Hard to Understand? Yes! Impossiable
to work with? No!




